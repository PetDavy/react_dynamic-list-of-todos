{"version":3,"sources":["api.js","components/shapes/TodoShape.js","components/TodoItem/TodoItem.jsx","components/FilterForm/FilterForm.jsx","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["getUser","userId","fetch","then","respones","PropTypes","number","isRequired","string","bool","TodoItem","todo","selectedTodoId","selectUser","searchValue","id","completed","title","toLowerCase","includes","className","classNames","type","readOnly","onClick","FilterForm","props","selectValue","selectFilter","search","value","placeholder","onChange","name","TodoList","state","shuffledTodos","filter","all","active","event","target","setState","shuffleTodos","todos","i","length","randNumber","Math","floor","random","randomizeTodos","filteredTodos","this","map","key","React","Component","CurrentUser","user","isLoading","userError","updateIsLoading","json","userData","updateUser","data","updateError","prevProps","email","phone","App","selectedUserId","todoId","validateTodos","result","prevState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e55d9cea.chunk.js","sourcesContent":["const TODO_URL = 'https://mate-api.herokuapp.com/todos';\nconst USERS_URL = 'https://mate-api.herokuapp.com/users';\n\nexport const getTodos = () => fetch(TODO_URL)\n  .then(respones => respones.json())\n  .then(result => result.data);\n\nexport const getUser = userId => fetch(`${USERS_URL}/${userId}`)\n  .then(respones => respones);\n  // .then(result => result.data)\n","import PropTypes from 'prop-types';\n\nexport const TodoShape = {\n  userId: PropTypes.number.isRequired,\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { TodoShape } from '../shapes/TodoShape';\n\nexport const TodoItem = ({ todo, selectedTodoId, selectUser, searchValue }) => {\n  const { id, userId, completed, title } = todo;\n\n  const isShown = title.toLowerCase().includes(searchValue);\n\n  if (!isShown) {\n    return null;\n  }\n\n  return (\n    <li\n      className={classNames('TodoList__item', {\n        'TodoList__item--checked': completed,\n        'TodoList__item--unchecked': !completed,\n      })}\n    >\n      <label>\n        <input type=\"checkbox\" readOnly />\n        <p>{title}</p>\n      </label>\n\n      <button\n        type=\"button\"\n        className={classNames('TodoList__user-button', 'button', {\n          'TodoList__user-button--selected': id === selectedTodoId,\n        })}\n        onClick={() => selectUser(userId, id)}\n      >\n        User&nbsp;#\n        {userId}\n      </button>\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape(TodoShape).isRequired,\n  selectedTodoId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n  searchValue: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './FilterForm.scss';\n\nexport const FilterForm = (props) => {\n  const { searchValue, selectValue, selectFilter, search } = props;\n\n  return (\n    <form\n      className=\"filter-form\"\n    >\n      <input\n        type=\"text\"\n        className=\"filter-form__input\"\n        value={searchValue}\n        placeholder=\"Search\"\n        onChange={search}\n      />\n\n      <select\n        name=\"filter\"\n        value={selectValue}\n        className=\"filter-form__select\"\n        onChange={selectFilter}\n      >\n        <option value=\"all\">All</option>\n        <option value=\"active\">Active</option>\n        <option value=\"completed\">Completed</option>\n      </select>\n    </form>\n  );\n};\n\nFilterForm.propTypes = {\n  searchValue: PropTypes.string.isRequired,\n  selectValue: PropTypes.string.isRequired,\n  search: PropTypes.func.isRequired,\n  selectFilter: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\nimport { TodoShape } from '../shapes/TodoShape';\nimport { TodoItem } from '../TodoItem';\nimport { FilterForm } from '../FilterForm';\n\nexport class TodoList extends React.Component {\n  state = {\n    searchValue: '',\n    selectValue: 'all',\n    shuffledTodos: [],\n  }\n\n  filter = {\n    all: () => true,\n    active: todo => !todo.completed,\n    completed: todo => todo.completed,\n  }\n\n  search = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      searchValue: value,\n    });\n  }\n\n  selectFilter = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      selectValue: value,\n    });\n  }\n\n  shuffleTodos = (todos) => {\n    const shuffledTodos = [...todos];\n\n    for (let i = shuffledTodos.length - 1; i > 0; i -= 1) {\n      const randNumber = Math.floor(Math.random() * (i + 1));\n\n      [shuffledTodos[i], shuffledTodos[randNumber]]\n        = [shuffledTodos[randNumber], shuffledTodos[i]];\n    }\n\n    return shuffledTodos;\n  }\n\n  randomizeTodos = () => {\n    const { todos } = this.props;\n\n    this.setState({\n      shuffledTodos: this.shuffleTodos(todos),\n    });\n  }\n\n  render() {\n    const { todos, selectedTodoId, selectUser } = this.props;\n    const { searchValue, selectValue, shuffledTodos } = this.state;\n    let filteredTodos;\n\n    if (shuffledTodos.length) {\n      filteredTodos = shuffledTodos.filter(this.filter[selectValue]);\n    } else {\n      filteredTodos = todos.filter(this.filter[selectValue]);\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <button\n            type=\"button\"\n            className=\"TodoList__button button\"\n            onClick={this.randomizeTodos}\n          >\n            Randomize\n          </button>\n\n          <FilterForm\n            searchValue={searchValue}\n            selectValue={selectValue}\n            search={this.search}\n            selectFilter={this.selectFilter}\n          />\n\n          <ul className=\"TodoList__list\">\n            {\n              filteredTodos.map(todo => (\n                <TodoItem\n                  key={todo.id}\n                  todo={todo}\n                  selectedTodoId={selectedTodoId}\n                  selectUser={selectUser}\n                  searchValue={searchValue}\n                />\n              ))\n            }\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape(TodoShape)).isRequired,\n  selectedTodoId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n    isLoading: false,\n    userError: false,\n  }\n\n  async componentDidMount() {\n    const { userId, getUser } = this.props;\n\n    this.updateIsLoading();\n\n    try {\n      const user = await getUser(userId);\n      const userData = await user.json();\n\n      this.updateUser(userData.data);\n    } catch (error) {\n      this.updateError();\n    }\n  }\n\n  async componentDidUpdate(prevProps) {\n    const { userId, getUser } = this.props;\n\n    if (prevProps.userId === userId) {\n      return;\n    }\n\n    this.updateIsLoading();\n\n    try {\n      const user = await getUser(userId);\n      const userData = await user.json();\n\n      this.updateUser(userData.data);\n    } catch (error) {\n      this.updateError();\n    }\n  }\n\n  updateError() {\n    this.setState({\n      isLoading: false,\n      userError: true,\n    });\n  }\n\n  updateUser(user) {\n    this.setState({\n      isLoading: false,\n      userError: false,\n      user,\n    });\n  }\n\n  updateIsLoading() {\n    this.setState({\n      isLoading: true,\n    });\n  }\n\n  render() {\n    if (this.state.userError || !this.state.user) {\n      return <h2>User not found</h2>;\n    }\n\n    if (!this.state.user.id || this.state.isLoading) {\n      return (\n        <h1 className=\"loading\">Loading...</h1>\n      );\n    }\n\n    const { id, name, email, phone } = this.state.user;\n    const { selectUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${id}`}</span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n\n        <button\n          type=\"button\"\n          className=\"CurrentUser__button button\"\n          onClick={() => selectUser(0)}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  getUser: PropTypes.func.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getTodos, getUser } from './api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    selectedTodoId: 0,\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState(prevState => ({\n      todos: [...prevState.todos, ...this.validateTodos(todos)],\n    }));\n  }\n\n  selectUser = (userId, todoId) => {\n    this.setState({\n      selectedUserId: userId,\n      selectedTodoId: todoId,\n    });\n  }\n\n  validateTodos = todos => todos.filter(todo => todo.userId\n        && todo.id\n        && todo.title\n        && typeof todo.completed === 'boolean')\n\n  render() {\n    const { todos, selectedUserId, selectedTodoId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedTodoId={selectedTodoId}\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                getUser={getUser}\n                selectUser={this.selectUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}